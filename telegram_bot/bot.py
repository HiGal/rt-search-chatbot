#!/usr/bin/env python3
"""
Author:  Lenar Gumerov  (tg: @lenargum)
"""

import logging
import requests
from requests.exceptions import HTTPError

from telegram_bot.secret import token, host_address

from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    ParseMode
)
from telegram.error import (
    TelegramError,
    Unauthorized,
    BadRequest,
    TimedOut,
    ChatMigrated,
    NetworkError)

# Logging configuration
custom_format = "%(asctime)s - %(levelname)s - %(message)s"
formatter = logging.Formatter(custom_format)
logging.basicConfig(format=custom_format)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

QUESTION, ANSWER, OPERATOR = range(3)
CATEGORY_PROPERTY, REQUEST_PROPERTY, CLARIFICATION_PROPERTY, QUESTION_PROPERTY, ANSWER_PROPERTY, REVIEW = range(6)

BAD_ANSWER = "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
NEW_ANSWER = "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
CALL_OPERATOR = "–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"

OPERATOR_GREETING_STUB = 'üôã‚Äç‚ôÇÔ∏è–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–µ—Ç—è. –Ø –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ–±–æ–≤–∞–ª–∏?'


def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        'ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Ç-–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É!\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å',
        reply_markup=ReplyKeyboardRemove()
    )
    user = update.message.from_user
    drop_states(user.id)
    logger.info("%s %s started dialogue.", user.first_name, user.last_name)

    return QUESTION


def question(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text

    logger.info("Question of %s: %s", user.first_name, text)

    if text[0] == '\"' and text[-1] == '\"':
        text = text[1:-1]

    if text == CALL_OPERATOR:
        try:
            response = requests.get(
                "{}/bot/v1/question/{}/operator".format(host_address, user.id)
            )
            response.raise_for_status()

            update.message.reply_text(
                "ü§ñ–°–µ–π—á–∞—Å –º—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º –≤–∞—Å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–º–æ—â–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ\n\n"
                "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å",
                reply_markup=ReplyKeyboardRemove()
            )
            update.message.reply_text(
                OPERATOR_GREETING_STUB,
                reply_markup=ReplyKeyboardRemove()
            )

            return OPERATOR
        except HTTPError as http_err:
            logger.exception(f'HTTP error occurred: {http_err}')
        except Exception as err:
            logger.exception(f'Other error occurred: {err}')

    answer_type = ''
    answer_data = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'
    answer_options = []

    try:
        response = requests.post(
            "{}/bot/v1/question/{}".format(host_address, user.id),
            json={
                "question": update.message.text
            })

        response.raise_for_status()
        json_response = response.json()

        answer_type = json_response['type']
        answer_data = json_response['answer']
        answer_options = json_response['options']
    except HTTPError as http_err:
        logger.exception(f'HTTP error occurred: {http_err}')
    except Exception as err:
        logger.exception(f'Other error occurred: {err}')

    return resolve_response(update, answer_data, answer_type, answer_options)


def answer(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text
    logger.info("Answer of %s: %s", user.first_name, text)

    if text == NEW_ANSWER:
        return new_question(update, user.id)
    elif text == BAD_ANSWER:
        update.message.reply_text(
            "ü§ñ–£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç:",
            reply_markup=ReplyKeyboardRemove()
        )

        answer_type = ''
        answer_data = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'
        answer_options = []

        try:
            response = requests.get(
                "{}/bot/v1/question/{}/incorrect".format(host_address, user.id)
            )
            response.raise_for_status()
            json_response = response.json()

            answer_type = json_response['type']
            answer_data = json_response['answer']
            answer_options = json_response['options']
        except HTTPError as http_err:
            logger.exception(f'HTTP error occurred: {http_err}')
        except Exception as err:
            logger.exception(f'Other error occurred: {err}')

        return resolve_response(update, answer_data, answer_type, answer_options)

    return QUESTION


def questions_cancel(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    drop_states(user.id)
    update.message.reply_text(
        'ü§ñ–ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!\n\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=ReplyKeyboardRemove()
    )

    return QUESTION


def operator(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text
    logger.info("Operator state achieved by %s", user.first_name)

    if text.lower() == '–¥–∞':
        update.message.reply_text(
            'üôã‚Äç‚ôÇÔ∏è–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä 3 —Ä–∞–∑–∞', reply_markup=ReplyKeyboardRemove()
        )
        return OPERATOR

    update.message.reply_text(
        'üôã‚Äç‚ôÇÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞, –¥–∞?', reply_markup=ReplyKeyboardRemove()
    )
    return OPERATOR


def resolve_response(update: Update, answer_data: str, answer_type: str, answer_options: list) -> int:
    if answer_type == 'final':
        reply_keyboard = [[NEW_ANSWER, BAD_ANSWER]]
        update.message.reply_text(
            "ü§ñ" + answer_data,
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
        )
        return ANSWER
    elif answer_type == 'clarification':
        reply_keyboard = [['\"' + item + '\"' for item in answer_options], [CALL_OPERATOR]]
        update.message.reply_text(
            "ü§ñ" + answer_data,
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
        )
        return QUESTION
    elif answer_type == 'operator':
        update.message.reply_text(
            "ü§ñ–°–µ–π—á–∞—Å –º—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º –≤–∞—Å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–º–æ—â–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ\n\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å",
            reply_markup=ReplyKeyboardRemove()
        )
        update.message.reply_text(
            OPERATOR_GREETING_STUB,
            reply_markup=ReplyKeyboardRemove()
        )
        return OPERATOR
    else:
        update.message.reply_text(
            "ü§ñü§∑–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–æ–≥–¥–∞ –±–æ—Ç –ø—ã—Ç–∞–ª—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return QUESTION


def new_question(update: Update, user_id) -> int:
    update.message.reply_text(
        "ü§ñ–ñ–¥–µ–º –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!",
        reply_markup=ReplyKeyboardRemove()
    )
    drop_states(user_id)
    return QUESTION


def drop_states(chatid):
    try:
        response = requests.get(
            "{}/bot/v1/question/{}/cancel".format(host_address, chatid)
        )
        response.raise_for_status()
    except HTTPError as http_err:
        logger.exception(f'HTTP error occurred: {http_err}')
    except Exception as err:
        logger.exception(f'Other error occurred: {err}')


def error_callback(update, context):
    try:
        raise context.error
    except Unauthorized as e:
        logger.exception("Unauthorized: %s", str(e))
    except BadRequest as e:
        logger.exception("BadRequest: %s", str(e))
        # handle malformed requests - read more below!
    except TimedOut as e:
        logger.exception("TimedOut: %s", str(e))
        # handle slow connection problems
    except NetworkError as e:
        logger.exception("NetworkError: %s", str(e))
        # handle other connection problems
    except ChatMigrated as e:
        logger.exception("ChatMigrated: %s", str(e))
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError as e:
        logger.exception("TelegramError: %s", str(e))
        # handle all other telegram_bot related errors
    except Exception as e:
        logger.exception("Exception: %s", str(e))
        # handle all other errors


def addition_start(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [["–¢–µ–ª–µ—Ñ–æ–Ω", "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ", "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"]]

    drop_userdata(context)
    update.message.reply_text(
        'ü§ñ–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏:\n'
        '- –°—Ñ–µ—Ä—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞\n'
        '- –ö–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞\n'
        '- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞\n'
        '- –°–∞–º –≤–æ–ø—Ä–æ—Å\n'
        '- –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ c—Ñ–µ—Ä—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.\n\n'
        '<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É —á–∞—Å—Ç—å –ø–æ–∑–∂–µ –Ω–µ–ª—å–∑—è',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.HTML
    )
    user = update.message.from_user
    logger.info("%s %s want to add new question", user.first_name, user.last_name)

    return CATEGORY_PROPERTY


def addition_cancel(update: Update, context: CallbackContext) -> int:
    drop_userdata(context)
    update.message.reply_text(
        'ü§ñ–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n\n'
        '/start - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n'
        '/add_question - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ',
        reply_markup=ReplyKeyboardRemove()
    )
    user = update.message.from_user
    logger.info("%s %s canceled adding new question", user.first_name, user.last_name)
    return ConversationHandler.END


def addition_category(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text
    logger.info("%s choosed %s category", user.first_name, text)

    context.user_data['category'] = text
    update.message.reply_text(
        'ü§ñ–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞.\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ñ–µ—Ä–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±—ã–ª–∞ <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>, —Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —è–≤–ª—è–µ—Ç—Å—è <b>–î–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω</b>.\n\n'
        '–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–Ω–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip',
        reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML
    )

    return REQUEST_PROPERTY


def addition_request(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text

    update.message.reply_text(
        'ü§ñ–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞.\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ <b>–î–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω</b>, —Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —è–≤–ª—è–µ—Ç—Å—è <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>.\n\n'
        '–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–Ω–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip',
        reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML
    )

    if text == "/skip":
        return CLARIFICATION_PROPERTY

    context.user_data['request'] = text
    return CLARIFICATION_PROPERTY


def addition_clarification(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text

    update.message.reply_text(
        'ü§ñ–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∞–º –≤–æ–ø—Ä–æ—Å.\n\n'
        '–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–Ω–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip',
        reply_markup=ReplyKeyboardRemove()
    )

    if text == "/skip":
        return QUESTION_PROPERTY

    context.user_data['clarification'] = text
    return QUESTION_PROPERTY


def addition_question(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text

    update.message.reply_text(
        'ü§ñ–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n\n'
        '–ï—Å–ª–∏ –≤—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–Ω–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip',
        reply_markup=ReplyKeyboardRemove()
    )

    if text == "/skip":
        return ANSWER_PROPERTY

    context.user_data['question'] = text
    return ANSWER_PROPERTY


def addition_answer(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text

    if text != "/skip":
        context.user_data['answer'] = text

    category = "‚ùå" if 'category' not in context.user_data else context.user_data['category']
    category = category.strip()
    request = "‚ùå" if 'request' not in context.user_data else context.user_data['request']
    request = request.strip()
    clarification = "‚ùå" if 'clarification' not in context.user_data else context.user_data['clarification']
    clarification = clarification.strip()
    question_temp = "‚ùå" if 'question' not in context.user_data else context.user_data['question']
    question_temp = question_temp.strip()
    answer_temp = "‚ùå" if 'answer' not in context.user_data else context.user_data['answer']
    answer_temp = answer_temp.strip()

    reply_keyboard = [["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞", "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç"],
                      ["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]]

    update.message.reply_text(
        'ü§ñ–í–∞—à–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '
        '\n<b>–°—Ñ–µ—Ä–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:</b> ' + category +
        '\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞:</b> ' + request +
        '\n<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞:</b> ' + clarification +
        '\n<b>–í–æ–ø—Ä–æ—Å:</b> ' + question_temp +
        '\n<b>–û—Ç–≤–µ—Ç:</b> ' + answer_temp + "\n\n"
                                           "–í—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ <i>–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞</i> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n"
                                           "–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞-–æ—Ç–≤–µ—Ç–∞?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
        parse_mode=ParseMode.HTML
    )

    return REVIEW


def addition_review(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    text = update.message.text

    if text == "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞":
        update.message.reply_text("ü§ñ–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë.",
                                  reply_markup=ReplyKeyboardRemove())
        return CATEGORY_PROPERTY
    elif text == "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞":
        update.message.reply_text("ü§ñ–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë.",
                                  reply_markup=ReplyKeyboardRemove())
        return REQUEST_PROPERTY
    elif text == "–í–æ–ø—Ä–æ—Å":
        update.message.reply_text("ü§ñ–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.",
                                  reply_markup=ReplyKeyboardRemove())
        return CLARIFICATION_PROPERTY
    elif text == "–û—Ç–≤–µ—Ç":
        update.message.reply_text("ü§ñ–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.",
                                  reply_markup=ReplyKeyboardRemove())
        return QUESTION_PROPERTY
    elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        category = context.user_data['category'].strip()
        request = None if 'request' not in context.user_data else context.user_data['request'].strip()
        if request is None:
            update.message.reply_text("ü§ñ–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω–∞.\n"
                                      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë.",
                                      reply_markup=ReplyKeyboardRemove())
            return CATEGORY_PROPERTY
        clarification = None if 'clarification' not in context.user_data else context.user_data['clarification'].strip()
        if clarification is None:
            clarification = "–ù–µ—Ç"
        question_temp = None if 'question' not in context.user_data else context.user_data['question'].strip()
        if question_temp is None:
            update.message.reply_text("ü§ñ–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω.\n"
                                      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.",
                                      reply_markup=ReplyKeyboardRemove())
            return CLARIFICATION_PROPERTY
        answer_temp = None if 'answer' not in context.user_data else context.user_data['answer'].strip()
        if answer_temp is None:
            update.message.reply_text("ü§ñ–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω.\n"
                                      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.",
                                      reply_markup=ReplyKeyboardRemove())
            return QUESTION_PROPERTY

        try:
            response = requests.post(
                "{}/bot/v1/index/new".format(host_address),
                json={
                    "category": category,
                    "request": request,
                    "clarification": clarification,
                    "question": question_temp,
                    "answer": answer_temp
                })
            response.raise_for_status()
            logger.info(
                "%s added question: category=(%s), request=(%s), clarification=(%s), question=(%s), answer=(%s)",
                user.first_name, category, request, clarification, question_temp, answer_temp)
            update.message.reply_text("ü§ñ–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! \n\n"
                                      "/start - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å\n"
                                      "/add_question - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç",
                                      reply_markup=ReplyKeyboardRemove())
        except HTTPError as http_err:
            logger.exception(f'HTTP error occurred: {http_err}')
        except Exception as err:
            logger.exception(f'Other error occurred: {err}')


def drop_userdata(context: CallbackContext):
    if 'category' in context.user_data:
        del context.user_data['category']
    if 'request' in context.user_data:
        del context.user_data['request']
    if 'clarification' in context.user_data:
        del context.user_data['clarification']
    if 'question' in context.user_data:
        del context.user_data['question']
    if 'answer' in context.user_data:
        del context.user_data['answer']


def main() -> None:
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater(token=token, use_context=True)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO
    questions_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION: [CommandHandler('cancel', questions_cancel), MessageHandler(Filters.text, question)],
            ANSWER: [CommandHandler('cancel', questions_cancel), MessageHandler(Filters.text, answer)],
            OPERATOR: [CommandHandler('cancel', questions_cancel), MessageHandler(Filters.text, operator)]
        },
        fallbacks=[CommandHandler('cancel', questions_cancel)],
        allow_reentry=True
    )

    # NEW_QUESTION, CATEGORY_PROPERTY, REQUEST_PROPERTY, CLARIFICATION_PROPERTY, QUESTION_PROPERTY, ANSWER_PROPERTY, REVIEW
    new_question_handler = ConversationHandler(
        entry_points=[CommandHandler('add_question', addition_start)],
        states={
            CATEGORY_PROPERTY: [CommandHandler('addition_cancel', questions_cancel),
                                MessageHandler(Filters.text, addition_category)],
            REQUEST_PROPERTY: [CommandHandler('addition_cancel', questions_cancel),
                               MessageHandler(Filters.text, addition_request)],
            CLARIFICATION_PROPERTY: [CommandHandler('addition_cancel', questions_cancel),
                                     MessageHandler(Filters.text, addition_clarification)],
            QUESTION_PROPERTY: [CommandHandler('addition_cancel', questions_cancel),
                                MessageHandler(Filters.text, addition_question)],
            ANSWER_PROPERTY: [CommandHandler('addition_cancel', questions_cancel),
                              MessageHandler(Filters.text, addition_answer)],
            REVIEW: [CommandHandler('addition_cancel', questions_cancel), MessageHandler(Filters.text, addition_review)]
        },
        fallbacks=[CommandHandler('addition_cancel', addition_cancel)],
        allow_reentry=True
    )

    dispatcher.add_handler(questions_handler)
    dispatcher.add_handler(new_question_handler)
    dispatcher.add_error_handler(error_callback)

    logger.info("Bot initialized")
    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()
